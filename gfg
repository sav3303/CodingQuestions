class Solution {
    static int nthFibonacci(int n){
        // code here
        int a = 0;
        int b = 1;
        int c = 0;
        int m = 1000000007;
        
        if(n==0 || n==1 ) return n;
        else {
            for(int i =2;i<=n;i++){
                c = (a%m+b%m)%m;
                a=b%m;
                b=c%m;
            }
        }
        return c;
    }
}



---+ Recursion ----

class Solution {
    static int nthFibonacci(int n){
        int m = 1000000007;
        if(n==0 || n==1) return n;
        else {
            return (nthFibonacci(n-1) % m + nthFibonacci(n-2) % m) % m;
        }
    }
}



import java.util.HashMap;
import java.util.Map;

class Solution {
    private static final int MOD = 1000000007;
    private static final Map<Integer, Integer> memo = new HashMap<>();

    static int nthFibonacci(int n) {
        if (n == 0 || n == 1) return n;
        
        if (memo.containsKey(n)) {
            return memo.get(n);
        } else {
            int fib = (nthFibonacci(n - 1) % MOD + nthFibonacci(n - 2) % MOD) % MOD;
            memo.put(n, fib);
            return fib;
        }
    }
}


----------------------


class Solution {
    static int nthFibonacci(int n){
        // code here
        int a = 0;
        int b = 1;
        int c = 0;
        int m = 1000000007;
        
        if(n==0 || n==1 ) return n;
        else {
            for(int i =2;i<=n;i++){
                c = (a%m+b%m)%m;
                a=b%m;
                b=c%m;
            }
        }
        return c;
    }
}


-----++++

sort the array in O(n*log n)

public class Main {
    public static void main(String[] args) {
        int[] arr = {1, 5, 3, 2};
        int n = arr.length;
        sortArr(arr, n);
        printArray(arr);
    }

    public static void sortArr(int[] arr, int n) {
        // Implementing insertion sort algorithm
        for (int i = 1; i < n; i++) {
            int key = arr[i];
            int j = i - 1;
            while (j >= 0 && arr[j] > key) {
                arr[j + 1] = arr[j];
                j = j - 1;
            }
            arr[j + 1] = key;
        }
    }

    public static void printArray(int[] arr) {
        for (int num : arr) {
            System.out.print(num + " ");
        }
    }
}
